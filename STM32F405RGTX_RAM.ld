/*
******************************************************************************
**
** @file        : LinkerScript.ld
**
** @author      : Auto-generated by STM32CubeIDE
**
** @brief       : Linker script for STM32F405RGTx Device from STM32F4 series
**                      1024Kbytes FLASH
**                      64Kbytes CCMRAM
**                      128Kbytes RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed as is, without any warranty
**                of any kind.
**
******************************************************************************
** @attention
**
** Copyright (c) 2022 STMicroelectronics.
** All rights reserved.
**
** This software is licensed under terms that can be found in the LICENSE file
** in the root directory of this software component.
** If no LICENSE file comes with this software, it is provided AS-IS.
**
******************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = ORIGIN(RAM) + LENGTH(RAM); /* end of "RAM" Ram type memory */

_Min_Heap_Size = 0x200 ; /* required amount of heap */
_Min_Stack_Size = 0x400 ; /* required amount of stack */

/* Memories definition */
MEMORY
{
  CCMRAM          (xrw) : ORIGIN = 0x10000000, LENGTH = 64K
  RAM             (xrw) : ORIGIN = 0x20000000, LENGTH = 128K
  BOOTLOADER      (rx)  : ORIGIN = 0x8000000,  LENGTH = 16K    /* Бутлодер. При запуске переносится в RAM и оттуда работает. */
  FIRMWARE_INFO   (rx)  : ORIGIN = 0x8004000,  LENGTH = 16K    /* Информация о прошивке. Содержит в себе размер, КС, флаги. Кратно 0x200. */
  /*FIRMWARE        (rx)  : ORIGIN = 0x8004400,  LENGTH = 992K */
}

/* Sections */
SECTIONS
{
  /* The startup code into "FLASH" Rom type memory */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } > BOOTLOADER

  /* The program code and other data into "FLASH" Rom type memory */
  .text :
  {
    . = ALIGN(4);

    *(.text.Reset_Handler)
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } > BOOTLOADER

  /* Constant data into "FLASH" Rom type memory */

  .ARM.extab   : {
    . = ALIGN(4);
    *(.ARM.extab* .gnu.linkonce.armextab.*)
    . = ALIGN(4);
  } >BOOTLOADER

  .ARM : {
    . = ALIGN(4);
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN(4);
  } >BOOTLOADER

  .preinit_array     :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    . = ALIGN(4);
  } >BOOTLOADER

  .init_array :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
    . = ALIGN(4);
  } >BOOTLOADER

  .fini_array :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
    . = ALIGN(4);
  } >BOOTLOADER

  /* Used by the startup to initialize data */
  _sidata = LOADADDR(.isr_vector_ram);

  /* Вектор прерываний в оперативной памяти */
  .isr_vector_ram :
  {
    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    _isr_vector_ram_addr = .;

    KEEP(*(.isr_vector_ram))        /* Startup code */

    . = ALIGN(4);

  } >RAM AT> BOOTLOADER

  /* Программа в оперативной памяти */
  .text_ram :
  {
    . = ALIGN(4);

    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */

    . = ALIGN(4);
  } >RAM AT> BOOTLOADER

  /* Константы, строки */
  .rodata_ram :
    {
      . = ALIGN(4);

      *(.rodata)         /* .rodata sections (constants, strings, etc.) */
      *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */

      . = ALIGN(4);
    } >RAM AT> BOOTLOADER

  /* Переменные */
  .data :
  {
    . = ALIGN(4);

    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */

  } >RAM AT> BOOTLOADER

  _siccmram = LOADADDR(.ccmram);

  /* CCM-RAM section
  *
  * IMPORTANT NOTE!
  * If initialized variables will be placed in this section,
  * the startup code needs to be modified to copy the init-values.
  */
  .ccmram :
  {
    . = ALIGN(4);
    _sccmram = .;       /* create a global symbol at ccmram start */
    *(.ccmram)
    *(.ccmram*)

    . = ALIGN(4);
    _eccmram = .;       /* create a global symbol at ccmram end */
  } >CCMRAM AT> BOOTLOADER



  .btl :
  {
    . = ALIGN(4);

    KEEP(*(.btl_cfg))
    KEEP(*(.btl_checksum))

    . = ALIGN(4);
  } >BOOTLOADER


  .fw_info :
  {
    . = ALIGN(4);

    KEEP(*(.fw_info))

    . = ALIGN(4);
  } >FIRMWARE_INFO


  /* Uninitialized data section into "RAM" Ram type memory */
  . = ALIGN(4);
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss section */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >RAM

  /* User_heap_stack section, used to check that there is enough "RAM" Ram  type memory left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >RAM

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
